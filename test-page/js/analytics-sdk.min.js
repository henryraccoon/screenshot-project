var AnalyticsSDK = (function (t) {
  "use strict";
  class e {
    constructor() {
      (this.ws = null),
        (this.eventQueue = []),
        (this.updateInterval = 3000),
        (this.reconnectTimeout = null),
        (this.sessionId =
          localStorage.getItem("analytics_session_id") ||
          Date.now() + "-" + Math.random().toString(36).substring(2)),
        localStorage.setItem("analytics_session_id", this.sessionId),
        this.connect(),
        this.setupEventListeners(),
        this.startPeriodicCollection();
    }
    connect() {
      this.ws && (this.ws.close(), (this.ws = null)),
        (this.ws = new WebSocket("ws://localhost:8080")),
        (this.ws.onopen = () => {
          console.log("Analytics WebSocket connected"), this.sendUpdate();
        }),
        (this.ws.onclose = () => {
          this.reconnectTimeout && clearTimeout(this.reconnectTimeout),
            (this.reconnectTimeout = setTimeout(() => this.connect(), 1e3));
        }),
        (this.ws.onerror = (t) => {
          console.error("WebSocket error:", t);
        });
    }
    sendUpdate() {
      if (this.ws?.readyState !== WebSocket.OPEN) return;
      const doc = document.documentElement;
      const allInputs = doc.querySelectorAll("input,select,textarea");
      allInputs.forEach((input) => {
        if (input.type !== "hidden") {
          if (input instanceof HTMLSelectElement) {
            const selected = input.selectedIndex;
            Array.from(input.options).forEach((opt, idx) => {
              if (idx === selected) {
                opt.setAttribute("selected", ""), (opt.selected = true);
              } else {
                opt.removeAttribute("selected"), (opt.selected = false);
              }
            });
          } else if (input instanceof HTMLInputElement) {
            const type = input.type || "text";
            if (type === "checkbox" || type === "radio") {
              input.setAttribute("checked", input.checked);
            } else if (type === "range") {
              input.setAttribute("value", input.value);
            } else {
              input.defaultValue = input.value;
            }
          } else if (input instanceof HTMLTextAreaElement) {
            (input.textContent = input.value),
              (input.defaultValue = input.value);
          }
        }
      });
      const t = {
        sessionId: this.sessionId,
        timestamp: Date.now(),
        events: this.eventQueue,
        domSnapshot: doc.outerHTML,
        pageUrl: window.location.href,
      };
      try {
        this.ws.send(LZString.compressToBase64(JSON.stringify(t))),
          (this.eventQueue = []);
      } catch (t) {
        console.error("Failed to send data:", t);
      }
    }
    setupEventListeners() {
      ["click", "change", "submit", "input"].forEach((t) => {
        document.addEventListener(
          t,
          (e) => {
            const s = e.target;
            s &&
              s instanceof HTMLElement &&
              (this.eventQueue.push({
                timestamp: Date.now(),
                type: t,
                target: {
                  tag: s.tagName.toLowerCase(),
                  id: s.id,
                  classes: Array.from(s.classList),
                  position: {
                    x: e instanceof MouseEvent ? e.clientX : 0,
                    y: e instanceof MouseEvent ? e.clientY : 0,
                  },
                },
              }),
              this.sendUpdate());
          },
          !0
        );
      }),
        window.addEventListener("beforeunload", () => {
          this.eventQueue.push({
            timestamp: Date.now(),
            type: "beforeunload",
            target: {
              tag: "window",
              id: "",
              classes: [],
              position: { x: 0, y: 0 },
            },
          }),
            this.sendUpdate();
        });
    }
    startPeriodicCollection() {
      setInterval(() => this.sendUpdate(), this.updateInterval);
    }
  }
  const s = () => {
    window._analyticsClient || (window._analyticsClient = new e());
  };
  return (
    (window.initAnalyticsClient = s),
    document.currentScript?.hasAttribute("data-auto-init") && s(),
    (t.AnalyticsClient = e),
    t
  );
})({});
